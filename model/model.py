from .model_parts import *

class U2net(nn.Module):
    def __init__(self):
        super().__init__()
        self.out = ConvnSigm()
        self.conv3x3_1 = nn.Conv2d(64,1,kernel_size=3,padding=1)
        self.conv3x3_2 = nn.Conv2d(64,1,kernel_size=3,padding=1)
        self.conv3x3_3 = nn.Conv2d(64,1,kernel_size=3,padding=1)
        self.conv3x3_4 = nn.Conv2d(64,1,kernel_size=3,padding=1)
        self.conv3x3_5 = nn.Conv2d(64,1,kernel_size=3,padding=1)
        self.conv3x3_6 = nn.Conv2d(64,1,kernel_size=3,padding=1)
        self.sigmoid = nn.Sigmoid()
        self.conv1x1 = nn.Conv2d(6,1,kernel_size=1)
        self.downsample = nn.MaxPool2d(kernel_size=2,stride=2)
        self.upsample = nn.UpsamplingBilinear2d(scale_factor=2)
        self.En_1 = Rsu7(en=True)
        self.En_2 = Rsu6(en=True)
        self.En_3 = Rsu5(en=True)
        self.En_4 = Rsu4(en=True)
        self.En_5 = Rsu4F(en=True)
        self.En_6 = Rsu4F(en=True)
        self.De_5 = Rsu4F(en=False)
        self.De_4 = Rsu4(en=False)
        self.De_3 = Rsu5(en=False)
        self.De_2 = Rsu6(en=False)
        self.De_1 = Rsu7(en=False)
    def forward(self,x):
        out1 = self.En_1(x)
        out1_ds = self.downsample(out1)
        out2 = self.En_2(out1_ds)
        out2_ds = self.downsample(out2)
        out3 = self.En_3(out2_ds)
        out3_ds = self.downsample(out3)
        out4 = self.En_4(out3_ds)
        out4_ds = self.downsample(out4)
        out5 = self.En_5(out4_ds)
        out5_ds = self.downsample(out5)
        out6 = self.En_6(out5_ds)
        out7 = self.De_5(torch.cat((out5,self.upsample(out6)),dim=1))
        out8 = self.De_4(torch.cat((out4,self.upsample(out7)),dim=1))
        out9 = self.De_3(torch.cat((out3,self.upsample(out8)),dim=1))
        out10 = self.De_2(torch.cat((out2,self.upsample(out9)),dim=1))
        out11 = self.De_1(torch.cat((out1,self.upsample(out10)),dim=1))
        nout6 = self.conv3x3_1(out6)
        s6 = self.upsample(self.upsample(self.upsample(self.upsample(self.upsample(self.sigmoid(nout6))))))
        s6_ = self.upsample(self.upsample(self.upsample(self.upsample(self.upsample(nout6)))))
        nout7 = self.conv3x3_2(out7)
        s5 = self.upsample(self.upsample(self.upsample(self.upsample(self.sigmoid(nout7)))))
        s5_ = self.upsample(self.upsample(self.upsample(self.upsample(nout7))))
        nout8 = self.conv3x3_3(out8)
        s4 = self.upsample(self.upsample(self.upsample(self.sigmoid(nout8))))
        s4_ = self.upsample(self.upsample(self.upsample(nout8)))
        nout9 = self.conv3x3_4(out9)
        s3 = self.upsample(self.upsample(self.sigmoid(nout9)))
        s3_ = self.upsample(self.upsample(nout9))
        nout10 = self.conv3x3_5(out10)
        s2 = self.upsample(self.sigmoid(nout10))
        s2_ = self.upsample(nout10)
        nout11 = self.conv3x3_6(out11)
        s1 = self.sigmoid(nout11)
        s0 = self.conv1x1(torch.cat((s6_,s5_,s4_,s3_,s2_,nout11),dim=1))
        s0 = self.sigmoid(s0)
        return s0,s1,s2,s3,s4,s5,s6
